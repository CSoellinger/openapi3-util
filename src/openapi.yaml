openapi: 3.0.0

################################
# API info
################################
info:
  description: "This is the HR Jobs API definition."
  version: "1.0.0"
  title: "HR Jobs"
  contact:
    email: "dev@pixelcrab.at"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"


################################
# API config
################################
servers:
  - url: http://localhost:4000/xapi
    description: Local test server
  - url: http://localhost:4000/api
    description: Local test server
  - url: http://example.com/api
    description: Main (production) server


################################
# Tags to use
################################
tags:
- name: "api"
  description: "API specified requests"
  
- name: "clients"
  description: "Clients collection"
  
- name: "client"
  description: "Client entity"
  
- name: "jobs"
  description: "Jobs collection. The client is identified by the provided API key."
  
- name: "job"
  description: "Job entity. The client is identified by the provided API key."
  
- name: "candidatures"
  description: "Candidatures collection. The client is identified by the provided API key."
  
- name: "candidature"
  description: "Candidature entity. The client is identified by the provided API key."
  
- name: "user"
  description: "Operations about user"

x-openapi-mongoose:
  schema-options:
    exclude-schemas:
    - "DbModel"
    - "ApiResponse"

components:
################################
# Object schemes
################################
  schemas:
    Client:
      allOf:
      - $ref: '#/components/schemas/DbModel'
      - title: "Client"
        type: "object"
        required:
        - "domains"
        properties:
          name:
            type: "string"
            example: "New client"
          apiKeys:
            type: "array"
            items:
              $ref: '#/components/schemas/ClientApiKey'
          # jobs:
          #   type: "array"
          #   items:
          #     type: "string"
          #     format: "object-id"
          #   x-openapi-mongoose:
          #     reference-to-many: "Job"
          #   # items:
          #   #   $ref: '#/components/schemas/Job'
          # candidatures:
          #   type: "array"
          #   items:
          #     type: "string"
          #     format: "object-id"
          #   x-openapi-mongoose:
          #     reference-to-many: "Candidature"
          #     # $ref: '#/components/schemas/Candidature'
        x-handle-mongoose-model: "Client"
        x-openapi-mongoose:
          reference-to-many:
          - "Job"
          - "Candidature"
    ClientApiKey:
      title: "Client API Key"
      type: "object"
      required:
      - "type"
      properties:
        _id:
          type: "string"
          format: "^[0-9a-fA-F]{24}$"
          readOnly: true
          example: "59fa99dfd65c357241db6f0f"
        keyType:
          type: "string"
          enum:
          - client
          - hrpuzzle
          example: "client"
        domains:
          type: "array"
          items:
            type: "string"
            default: "*"
          uniqueItems: true
          default:
          - "*"
          example:
          - "*.forallsubdomains.com"
          - "only.onedomain.com"
    Job:
      allOf:
      - $ref: '#/components/schemas/DbModel'
      - title: "Job"
        type: "object"
        required:
        - "beginningDate"
        - "title"
        - "place"
        properties:
          title:
            type: "string"
            example: "Ingeneur"
          province:
            type: "string"
            enum:
            - Oberösterreich
            - Niederösterreich
            - Wien
            - Burgenland
            - Salzburg
            - Steiermark
            - Kärnten
            - Tirol
            - Vorarlberg
            example: "Oberösterreich"
          beginningDate:
            type: "string"
            format: "date"
            example: "2017-10-10"
          place:
            type: "string"
            example: "Ried im Innkreis"
          category:
            type: "string"
            example: "Einkauf"
          education:
            type: "string"
            example: "Lehre"
          setting:
            type: "string"
            example: "-"
          description:
            type: "string"
            format: "html"
            example: "<b>HTML possible</b>"
          contact:
            type: "string"
            format: "html"
            example: "<b>HTML possible</b>"
          client:
            type: "string"
            format: "object-id"
            x-openapi-mongoose:
              reference-to-one: "Client"
          #   $ref: '#/components/schemas/Client'
        x-handle-mongoose-model: "Job"
    Candidature:
      allOf:
      - $ref: '#/components/schemas/DbModel'
      - title: "Candidature"
        type: "object"
        required:
        - "mail"
        properties:
          sex:
            type: "string"
            enum:
            - female
            - male
            example: "male"
          title:
            type: "string"
            example: "Dr."
          firstName:
            type: "string"
            example: "Max"
          lastName:
            type: "string"
            example: "Muster"
          birthday:
            type: "string"
            format: "date"
            example: "1987-04-06"
          address:
            type: "string"
            example: "Einestrasse"
          zip:
            type: "string"
            example: "1234"
          city:
            type: "string"
            example: "Schöner Ort"
          phone:
            type: "string"
            example: "+43 / 732 / 7070"
          mail:
            type: "string"
            format: "email"
            example: "meine@email.at"
          dreamJob:
            type: "string"
            example: "Schuhmacher"
          files:
            type: "array"
            items:
              $ref: '#/components/schemas/CandidatureFiles'
            maxItems: 5
          client:
            type: "string"
            format: "object-id"
            x-openapi-mongoose:
              reference-to-one: "Client"
        x-handle-mongoose-model: "Candidature"
    CandidatureFiles:
      title: "Candidature files"
      type: "object"
      required:
      - destination
      - filename
      properties:
        _id:
          type: "string"
          format: "^[0-9a-fA-F]{24}$"
          readOnly: true
          example: "59fa99dfd65c357241db6f0f"
        fieldname:
          type: "string"
        originalname:
          type: "string"
        encoding:
          type: "string"
        mimetype:
          type: "string"
        size:
          type: "number"
        destination:
          type: "string"
        filename:
          type: "string"
        path:
          type: "string"
    User:
      allOf:
      - $ref: '#/components/schemas/DbModel'
      - title: "User Safe"
        type: "object"
        required:
        - username
        - password
        properties:
          username:
            type: "string"
            example: "MaxMuster"
          password: 
            type: "string"
            format: "password"
            minLength: 4
            # writeOnly: true
            example: "AAljasdjlau7892jhih89d"
        x-handle-mongoose-model: "User"
    DbModel:
      title: "DB Model"
      type: "object"
      properties:
        _id:
          type: "string"
          format: "^[0-9a-fA-F]{24}$"
          readOnly: true
          example: "59fa99dfd65c357241db6f0f"
        # updatedAt:
        #   type: "string"
        #   format: "date-time"
        #   example: "2017-11-03 00:30:25.408"
        # createdAt:
        #   type: "string"
        #   format: "date-time"
        #   example: "2017-11-03 00:30:25.408"
        # __v:
        #   type: "number"
        #   format: "int32"
        #   example: "2017-11-03 00:30:25.408"
    ApiResponse:
      title: "ApiResponse"
      type: "object"
      required:
      - code
      - type
      - message
      properties:
        code:
          type: "integer"
          format: "int32"
          example: 0
        type:
          type: "string"
          example: "message_type"
        message:
          type: "string"
          example: "API message"
      x-openapi-mongoose:
        exclude-schema: true

################################
# API security definitions
################################
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      x-middleware-security: "./middlewares/AuthMiddleware"
    apiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "X-API-KEY"
      x-middleware-security: "./middlewares/AuthApiKeyMiddleware"

################################
# API parameter definitions
################################
  parameters:
    Id:
      in: "path"
      name: "id"
      description: "ID of entity"
      schema:
        type: "string"
      required: true
    SelectFields:
      in: "query"
      name: "$select"
      description: "Entity fields to select"
      schema:
        type: "string"
      # example: "any field"
      required: false
    SortFields:
      in: "query"
      name: "$sort"
      description: "Entity fields for sorting"
      schema:
        type: "string"
      # example: "any -field"
      required: false

################################
# API response definitions
################################
  responses:
    Api200:
      description: "API success 200 response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
    Api201:
      description: "API success 201 response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
    Api400:
      description: "API error 400 response"
      content:
        application/json:
          schema:
            allOf:
            - $ref: "#/components/schemas/ApiResponse"
            - example:
                code: 400
                type: "error"
                message: "API error"
    Api404:
      description: "API error 404 \"Not found\" response"
      content:
        application/json:
          schema:
            allOf:
            - $ref: "#/components/schemas/ApiResponse"
            - example:
                code: 404
                type: "error"
                message: "Not found"
    Api405:
      description: "API error 405 \"Invalid input\" response"
      content:
        application/json:
          schema:
            allOf:
            - $ref: "#/components/schemas/ApiResponse"
            - example:
                code: 405
                type: "error"
                message: "Invalid input"
    Client:
      description: "Client"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Client"
    Clients:
      description: "Clients"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/Client"
    Job:
      description: "Job"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Job"
    Jobs:
      description: "Jobs"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/Job"
    Candidature:
      description: "Candidature"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Candidature"
    Candidatures:
      description: "Candidatures"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/Candidature"
    User:
      description: "User"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    Users:
      description: "Users"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/User"

################################
# API request body definitions
################################
  requestBodies:
    Client:
      description: "Client object as JSON string"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Client"
    ClientApiKey:
      description: "Client API Key object as JSON string"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientApiKey"
    Job:
      description: "Job object as JSON string"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Job"
    Candidature:
      description: "Candidature object as JSON string"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Candidature"
    User:
      description: "User object as JSON string"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserDb:
      description: "User object as JSON string"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

################################
# API paths
################################
paths:
  /:
    get:
      tags:
      - "api"
      summary: "Returns API version and package name"
      description: "Returns API version and package name"
      operationId: "getIndex"
      responses:
        200:
          description: "API version and package name"
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  name:
                    type: string
                example:
                  version: "1.0.0"
                  name: "Api"
      x-middleware-send-response: "./controllers/api/ApiController#api"
  # API
  /ping:
    get:
      tags:
      - "api"
      summary: "Returns a pong message"
      description: "Check if API is generally available and return a pong message"
      operationId: "getPong"
      responses:
        200:
          description: "Return API message with pong text"
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/ApiResponse"
                - default:
                    code: 200
                    type: "success"
                    message: "pong"
                - example:
                    code: 200
                    type: "success"
                    message: "pong"
#  /openapi.yaml:
#    get:
#      tags:
#      - "api"
#      summary: "Returns the openapi specification as yaml"
#      description: "Returns the openapi specification as yaml"
#      operationId: "getOpenApiYaml"
#      responses:
#        200:
#          description: "OpenAPI yaml"
#          content:
#            application/text:
#              schema:
#                type: string
#      security:
#      - basicAuth: []
#  /openapi.json:
#    get:
#      tags:
#      - "api"
#      summary: "Returns the openapi specification as json"
#      description: "Returns the openapi specification as json"
#      operationId: "getOpenApiJson"
#      responses:
#        200:
#          description: "OpenAPI json"
#          content:
#            application/json:
#              schema:
#                type: object
#      security:
#      - basicAuth: []

  # Clients
  /clients:
    get:
      tags:
      - "clients"
      summary: "Get all clients"
      description: "Get all clients"
      operationId: "getClients"
      parameters:
      - $ref: "#/components/parameters/SelectFields"
      - $ref: "#/components/parameters/SortFields"
      responses:
        200:
          $ref: "#/components/responses/Clients"
      security:
      - basicAuth: []
    post:
      tags:
      - "clients"
      summary: "Add new client to collection"
      description: "Add new client to collection"
      operationId: "addClient"
      requestBody:
        $ref: "#/components/requestBodies/Client"
      responses:
        201:
          $ref: "#/components/responses/Client"
        405:
          $ref: "#/components/responses/Api405"
      security:
      - basicAuth: []
    x-handle-mongoose-model: "Client"
  /clients/{id}:
    get:
      tags:
      - "client"
      summary: "Find client by ID"
      description: "Returns a single client"
      operationId: "getClient"
      parameters:
      - $ref: "#/components/parameters/Id"
      - $ref: "#/components/parameters/SelectFields"
      responses:
        200:
          $ref: "#/components/responses/Client"
      security:
      - basicAuth: []
    put:
      tags:
      - "client"
      summary: "Update existing client"
      description: "Update existing client"
      operationId: "updateClient"
      parameters:
      - $ref: "#/components/parameters/Id"
      requestBody:
        $ref: "#/components/requestBodies/Client"
      responses:
        204:
          $ref: "#/components/responses/Client"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
        405:
          $ref: "#/components/responses/Api405"
      security:
      - basicAuth: []
    delete:
      tags:
      - "client"
      summary: "Delete client"
      description: "Delete client"
      operationId: "deleteClient"
      parameters:
      - $ref: "#/components/parameters/Id"
      responses:
        200:
          $ref: "#/components/responses/Api200"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
      security:
      - basicAuth: []
    x-handle-mongoose-model: "Client"
  /clients/{id}/apiKey:
    post:
      tags:
      - "client"
      summary: "Add API key to client"
      description: "Add API key to client"
      operationId: "addClientApiKey"
      parameters:
      - $ref: "#/components/parameters/Id"
      requestBody:
        $ref: "#/components/requestBodies/ClientApiKey"
      responses:
        201:
          $ref: "#/components/responses/Client"
        405:
          $ref: "#/components/responses/Api405"
      security:
      - basicAuth: []
  /clients/{id}/apiKey/{apiKey}:
    delete:
      tags:
      - "client"
      summary: "Delete an API key from client"
      description: "Delete an API key from client"
      operationId: "deleteClientApiKey"
      parameters:
      - $ref: "#/components/parameters/Id"
      responses:
        200:
          $ref: "#/components/responses/Api200"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
      security:
      - basicAuth: []
      
  # Jobs
  /jobs:
    get:
      tags:
      - "jobs"
      summary: "Get all jobs"
      description: "Get all jobs"
      operationId: "getJobs"
      parameters:
      - $ref: "#/components/parameters/SelectFields"
      - $ref: "#/components/parameters/SortFields"
      responses:
        200:
          $ref: "#/components/responses/Jobs"
      security:
      - apiKeyAuth: []
    post:
      tags:
      - "jobs"
      summary: "Add new job to collection"
      description: "Add new job to collection"
      operationId: "addJob"
      requestBody:
        $ref: "#/components/requestBodies/Job"
      responses:
        201:
          $ref: "#/components/responses/Job"
        405:
          $ref: "#/components/responses/Api405"
      security:
      - apiKeyAuth: []
    delete:
      tags:
      - "jobs"
      summary: "Delete all jobs"
      description: "Delete all jobs"
      operationId: "deleteJobs"
      responses:
        200:
          $ref: "#/components/responses/Api200"
      security:
      - apiKeyAuth: []
    x-handle-mongoose-model: "Job"
  /jobs/{id}:
    get:
      tags:
      - "job"
      summary: "Find job by ID"
      description: "Returns a single job."
      operationId: "getJob"
      parameters:
      - $ref: "#/components/parameters/Id"
      - $ref: "#/components/parameters/SelectFields"
      responses:
        200:
          $ref: "#/components/responses/Job"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
      security:
      - apiKeyAuth: []
    put:
      tags:
      - "job"
      summary: "Update an existing job"
      description: "Update an existing job"
      operationId: "updateJob"
      parameters:
      - $ref: "#/components/parameters/Id"
      requestBody:
        $ref: "#/components/requestBodies/Job"
      responses:
        200:
          $ref: "#/components/responses/Job"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
        405:
          $ref: "#/components/responses/Api405"
      security:
      - apiKeyAuth: []
    delete:
      tags:
      - "job"
      summary: "Delete job"
      description: "Delete job"
      operationId: "deleteJob"
      parameters:
      - $ref: "#/components/parameters/Id"
      responses:
        200:
          $ref: "#/components/responses/Api200"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
      security:
      - apiKeyAuth: []
    x-handle-mongoose-model: "Job"
#  /jobs/createWithArray:
#    post:
#      tags:
#      - "job"
#      summary: "Creates list of jobs with given array"
#      description: "Creates list of jobs with given array"
#      operationId: "createJobsWithArrayInput"
#      requestBody:
#        description: "List of job object"
#        required: true
#        content:
#          application/json:
#            schema:
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Job"
#      responses:
#        200:
#          $ref: "#/components/responses/Api200"
#      security:
#      - apiKeyAuth: []

  # Candidature
  /candidature:
    get:
      tags:
      - "candidatures"
      summary: "Get all candidatures"
      description: "Get all candidatures from a client identified by the API key."
      operationId: "getCandidatures"
      parameters:
      - $ref: "#/components/parameters/SelectFields"
      - $ref: "#/components/parameters/SortFields"
      responses:
        200:
          $ref: "#/components/responses/Candidatures"
      security:
      - basicAuth: []
    post:
      tags:
      - "candidatures"
      summary: "Add new candidature to collection"
      description: "Add new candidature to collection"
      operationId: "addCandidature"
      requestBody:
        $ref: "#/components/requestBodies/Candidature"
      responses:
        201:
          $ref: "#/components/responses/Candidature"
        405:
          $ref: "#/components/responses/Api405"
      security:
      - apiKeyAuth: []
    x-handle-mongoose-model: "Candidature"
  /candidature/{id}:
    get:
      tags:
      - "candidature"
      summary: "Find candidature by ID"
      description: "Returns a single candidature."
      operationId: "getCandidature"
      parameters:
      - $ref: "#/components/parameters/Id"
      - $ref: "#/components/parameters/SelectFields"
      responses:
        200:
          $ref: "#/components/responses/Candidature"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
      security:
      - basicAuth: []
    #put:
    #  tags:
    #  - "candidature"
    #   summary: "Update an existing job"
    #   description: "Update an existing job"
    #   operationId: "updateJob"
    #   parameters:
    #   - $ref: "#/components/parameters/Id"
    #   requestBody:
    #     $ref: "#/components/requestBodies/Job"
    #   responses:
    #     200:
    #       $ref: "#/components/responses/Job"
    #     400:
    #       $ref: "#/components/responses/Api400"
    #     404:
    #       $ref: "#/components/responses/Api404"
    #     405:
    #       $ref: "#/components/responses/Api405"
    #   security:
    #   - apiKeyAuth: []
    delete:
      tags:
      - "candidature"
      summary: "Delete candidature"
      description: "Delete candidature"
      operationId: "deleteCandidature"
      parameters:
      - $ref: "#/components/parameters/Id"
      responses:
        200:
          $ref: "#/components/responses/Api200"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
      security:
      - basicAuth: []
    x-handle-mongoose-model: "Candidature"
  /candidature/{id}/upload:
    post:
      tags:
      - "candidature"
      summary: "Upload a file to candidature"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          $ref: "#/components/responses/Candidature"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
      security:
      - basicAuth: []
      
  # User
  /users:
    get:
      tags:
      - "user"
      summary: "Get all users"
      description: "Get all users"
      operationId: "getCollection"
      parameters:
      - $ref: "#/components/parameters/SelectFields"
      - $ref: "#/components/parameters/SortFields"
      responses:
        200:
          $ref: "#/components/responses/Users"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
      security:
      - basicAuth: []
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "postEntity"
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        201:
          $ref: "#/components/responses/User"
        400:
          $ref: "#/components/responses/Api400"
        405:
          $ref: "#/components/responses/Api405"
      security:
      - basicAuth: []
    x-handle-mongoose-model: "User"
  /users/{id}:
    get:
      tags:
      - "user"
      summary: "Get user"
      description: "Get user"
      operationId: "getEntity"
      parameters:
      - $ref: "#/components/parameters/Id"
      - $ref: "#/components/parameters/SortFields"
      responses:
        200:
          $ref: "#/components/responses/User"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
      security:
      - basicAuth: []
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "putEntity"
      parameters:
      - $ref: "#/components/parameters/Id"
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        200:
          $ref: "#/components/responses/User"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
        405:
          $ref: "#/components/responses/Api405"
      security:
      - basicAuth: []
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteEntity"
      parameters:
      - $ref: "#/components/parameters/Id"
      responses:
        200:
          $ref: "#/components/responses/Api200"
        400:
          $ref: "#/components/responses/Api400"
        404:
          $ref: "#/components/responses/Api404"
      security:
      - basicAuth: []
    x-handle-mongoose-model: "User"
  /users/login:
    post:
      tags:
      - "user"
      summary: "Log in user"
      description: "Logs user into the system"
      operationId: "loginUser"
      requestBody:
        content:
          default:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/Api400"
      x-middleware-send-response: "./controllers/api/UserController#login"
  /users/logout:
    get:
      tags:
      - "user"
      summary: "Log out user"
      description: "Logs out current logged in user session"
      operationId: "logoutUser"
      responses:
        200:
          $ref: "#/components/responses/Api200"
        default:
          description: "successful operation"
      x-middleware-send-response: "./controllers/api/UserController#logout"
